# Copied from https://github.com/dry-python/returns/blob/master/pyproject.toml

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

target-version = "py313"
line-length = 120

preview = true
fix = true
format.quote-style = "single"
format.docstring-code-format = false
lint.select = [
  "A",    # flake8-builtins
  "B",    # flake8-bugbear
  "C4",   # flake8-comprehensions
  "C90",  # maccabe
  "COM",  # flake8-commas
  "D",    # pydocstyle
  "DTZ",  # flake8-datetimez
  "E",    # pycodestyle
  "ERA",  # flake8-eradicate
  "EXE",  # flake8-executable
  "F",    # pyflakes
  "FBT",  # flake8-boolean-trap
  "FLY",  # pyflint
  "FURB", # refurb
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "ISC",  # flake8-implicit-str-concat
  "LOG",  # flake8-logging
  "N",    # pep8-naming
  "PERF", # perflint
  "PIE",  # flake8-pie
  "PL",   # pylint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "PYI",  # flake8-pyi
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # ruff
  "S",    # flake8-bandit
  "SIM",  # flake8-simpify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T100", # flake8-debugger
  "TRY",  # tryceratops
  "UP",   # pyupgrade
  "W",    # pycodestyle
  "YTT",  # flake8-2020
]
lint.ignore = [
  "A005",   # allow to shadow stdlib and builtin module names
  "COM812", # trailing comma, conflicts with `ruff format`
  # Different doc rules that we don't really care about:
  "D100",
  "D104",
  "D106",
  "D203",
  "D212",
  "D401",
  "D404",
  "D405",
  "ISC001",  # implicit string concat conflicts with `ruff format`
  "ISC003",  # prefer explicit string concat over implicit concat
  "PLR09",   # we have our own complexity rules
  "PLR2004", # do not report magic numbers
  "PLR6301", # do not require classmethod / staticmethod when self not used
  "TRY003",  # long exception messages from `tryceratops`
]
lint.per-file-ignores."*.pyi" = [ "D103" ]
lint.per-file-ignores."returns/context/__init__.py" = [ "F401", "PLC0414" ]
lint.per-file-ignores."returns/contrib/mypy/*.py" = [ "S101" ]
lint.per-file-ignores."returns/contrib/pytest/__init__.py" = [ "F401", "PLC0414" ]
lint.per-file-ignores."returns/interfaces/*.py" = [ "S101" ]
lint.per-file-ignores."returns/methods/__init__.py" = [ "F401", "PLC0414" ]
lint.per-file-ignores."returns/pipeline.py" = [ "F401", "PLC0414" ]
lint.per-file-ignores."returns/pointfree/__init__.py" = [ "F401", "PLC0414" ]
lint.per-file-ignores."returns/primitives/asserts.py" = [ "S101" ]
lint.per-file-ignores."tests/*.py" = [
  "RUF029", # allow async functions to not use `await`
  "S101",   # asserts
  "S105",   # hardcoded passwords
  "S404",   # subprocess calls are for tests
  "S603",   # do not require `shell=True`
  "S607",   # partial executable paths
]
lint.per-file-ignores."tests/test_examples/*" = [ "D102" ]
lint.per-file-ignores."tests/test_examples/test_maybe/test_maybe_pattern_matching.py" = [
  "D101",
  "D103",
  "F811",
]
lint.per-file-ignores."tests/test_examples/test_result/test_result_pattern_matching.py" = [
  "D103",
]
lint.per-file-ignores."tests/test_pattern_matching.py" = [ "S101" ]
lint.external = [ "WPS" ]
lint.flake8-quotes.inline-quotes = "single"
lint.mccabe.max-complexity = 6
lint.pep8-naming.staticmethod-decorators = [ "law_definition", "staticmethod" ]
lint.pydocstyle.convention = "google"